#!/usr/bin/env node

const fs = require("fs");
const readline = require("readline");
const path = require("path");

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

console.log("ü§ñ Telegram Whitelist Bot Setup\n");
console.log(
    "This script will help you configure your bot. Please have the following ready:"
);
console.log("1. Bot token from @BotFather");
console.log("2. Your Telegram user ID");
console.log("3. Your group/channel ID\n");

const questions = [
    {
        key: "BOT_TOKEN",
        question: "Enter your bot token from @BotFather: ",
        validate: (input) =>
            input && input.includes(":") ? null : "Invalid bot token format",
    },
    {
        key: "ADMIN_USER_ID",
        question: "Enter your Telegram user ID: ",
        validate: (input) =>
            input && !isNaN(input) ? null : "User ID must be a number",
    },
    {
        key: "GROUP_ID",
        question: "Enter your group/channel ID (with - for groups): ",
        validate: (input) =>
            input && !isNaN(input) ? null : "Group ID must be a number",
    },
];

let config = {};
let currentQuestionIndex = 0;

function askQuestion() {
    if (currentQuestionIndex >= questions.length) {
        generateConfig();
        return;
    }

    const question = questions[currentQuestionIndex];
    rl.question(question.question, (answer) => {
        const error = question.validate(answer.trim());
        if (error) {
            console.log(`‚ùå ${error}. Please try again.`);
            askQuestion();
            return;
        }

        config[question.key] = answer.trim();
        currentQuestionIndex++;
        askQuestion();
    });
}

function generateConfig() {
    const configContent = `// Configuration for Telegram Whitelist Bot
// Generated by setup script

module.exports = {
  // Telegram Bot Token (get from @BotFather)
  BOT_TOKEN: '${config.BOT_TOKEN}',
  
  // Admin User ID (your Telegram user ID)
  ADMIN_USER_ID: '${config.ADMIN_USER_ID}',
  
  // Group/Channel ID where the bot will monitor
  GROUP_ID: '${config.GROUP_ID}',
  
  // Bot Settings
  AUTO_KICK_ENABLED: true,
  ALLOW_BOTS: false,
  SEND_WELCOME_MESSAGE: true,
  ANNOUNCE_KICKS: true,
  INSTANT_KICK: true,
  UNBAN_DELAY: 1000,
  WHITELIST_FILE: './data/whitelist.json',
  LOG_FILE: './data/bot.log',
  
  // Messages
  MESSAGES: {
    WELCOME: 'üëã Welcome! You are approved to join this group.',
    KICKED: 'üö´ Access denied - group restricted to approved members only',
    RESTRICTION_NOTICE: 'üîí This group is restricted. Only approved members can join.',
    ADDED_TO_WHITELIST: '‚úÖ User added to whitelist',
    REMOVED_FROM_WHITELIST: '‚ùå User removed from whitelist',
    NOT_ADMIN: '‚ö†Ô∏è Only admins can use this command',
    USER_NOT_FOUND: '‚ùå User not found',
    HELP: \`
ü§ñ *Whitelist Bot Commands:*

**Basic Commands:**
/start - Start the bot
/help - Show this help message

**Admin Commands (private chat only):**
/whitelist - Show current whitelist
/add @username - Add user to whitelist
/remove @username - Remove user from whitelist
/status - Show bot status
/checkpermissions - Check bot permissions
/testmode on|off - Enable/disable debug mode

*Admin commands work in private chat with bot*
    \`
  }
};`;

    try {
        // Create config file
        fs.writeFileSync("config.js", configContent);
        console.log("‚úÖ Configuration file created successfully!");
        
        // Create data directory and initialize files
        initializeDataFiles();
        
        console.log("\nüéâ Setup completed successfully!");
        console.log("\nNext steps:");
        console.log("1. Make sure your bot is added as admin to your group/channel");
        console.log("2. Give your bot these permissions:");
        console.log("   - Delete messages");
        console.log("   - Ban users");
        console.log("   - Invite users");
        console.log("3. Run security check: npm run security-check");
        console.log("4. Start the bot with: npm start");
        console.log("5. Test by adding yourself to whitelist: /add your_user_id");
        console.log("\nüìÅ Data files initialized:");
        console.log("   - ./data/whitelist.json (empty whitelist)");
        console.log("   - ./data/bot.log (ready for logging)");
    } catch (error) {
        console.error("‚ùå Error during setup:", error.message);
    }

    rl.close();
}

function initializeDataFiles() {
    try {
        // Create data directory if it doesn't exist
        const dataDir = './data';
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
            console.log("üìÅ Created data directory");
        } else {
            console.log("üìÅ Data directory already exists");
        }
        
        // Initialize whitelist.json with empty array
        const whitelistFile = path.join(dataDir, 'whitelist.json');
        if (!fs.existsSync(whitelistFile)) {
            const initialWhitelist = {
                version: "1.0",
                created: new Date().toISOString(),
                users: []
            };
            fs.writeFileSync(whitelistFile, JSON.stringify(initialWhitelist, null, 2));
            console.log("üìù Created whitelist.json file");
        } else {
            console.log("üìù whitelist.json already exists");
        }
        
        // Initialize bot.log file
        const logFile = path.join(dataDir, 'bot.log');
        if (!fs.existsSync(logFile)) {
            const initialLog = `# Telegram Whitelist Bot Log
# Created: ${new Date().toISOString()}
# This file will contain bot activity logs

`;
            fs.writeFileSync(logFile, initialLog);
            console.log("üìä Created bot.log file");
        } else {
            console.log("üìä bot.log already exists");
        }
        
        // Add admin user to whitelist automatically
        if (config.ADMIN_USER_ID) {
            try {
                const whitelistContent = JSON.parse(fs.readFileSync(whitelistFile, 'utf8'));
                if (!whitelistContent.users.includes(config.ADMIN_USER_ID)) {
                    whitelistContent.users.push(config.ADMIN_USER_ID);
                    whitelistContent.lastModified = new Date().toISOString();
                    fs.writeFileSync(whitelistFile, JSON.stringify(whitelistContent, null, 2));
                    console.log(`üëë Added admin user (${config.ADMIN_USER_ID}) to whitelist`);
                } else {
                    console.log("üëë Admin user already in whitelist");
                }
            } catch (error) {
                console.warn("‚ö†Ô∏è Could not add admin to whitelist:", error.message);
            }
        }
        
    } catch (error) {
        console.error("‚ùå Error initializing data files:", error.message);
        throw error;
    }
}

console.log("Let's get started!\n");
askQuestion();
